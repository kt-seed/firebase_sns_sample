import { describe, it, expect, beforeEach, vi } from 'vitest';
import { mount } from '@vue/test-utils';
import { nextTick } from 'vue';
import IconPicker from '@/components/users/IconPicker.vue';

// icons.js „ÅÆ„É¢„ÉÉ„ÇØ
vi.mock('@/utils/icons', () => {
  const mockUserIcons = [
    { id: 'icon-cat', emoji: 'üê±', name: 'Áå´' },
    { id: 'icon-dog', emoji: 'üê∂', name: 'Áä¨' },
    { id: 'icon-bear', emoji: 'üêª', name: 'ÁÜä' },
    { id: 'icon-fox', emoji: 'ü¶ä', name: 'Áãê' },
    { id: 'icon-panda', emoji: 'üêº', name: '„Éë„É≥„ÉÄ' }
  ];

  return {
    USER_ICONS: mockUserIcons,
    DEFAULT_ICON: 'icon-cat',
    getIconEmoji: vi.fn((iconId) => {
      const icon = mockUserIcons.find((item) => item.id === iconId);
      return icon ? icon.emoji : 'üë§';
    })
  };
});

describe('IconPicker', () => {
  describe('ÂàùÊúüË°®Á§∫', () => {
    it('„Éá„Éï„Ç©„É´„Éà„Ç¢„Ç§„Ç≥„É≥„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
      const wrapper = mount(IconPicker);

      expect(wrapper.text()).toContain('üê±');
      expect(wrapper.text()).toContain('ÁèæÂú®„ÅÆ„Ç¢„Ç§„Ç≥„É≥');
    });

    it('modelValue „Å®„Åó„Å¶ÊåáÂÆö„Åó„Åü„Ç¢„Ç§„Ç≥„É≥„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
      const wrapper = mount(IconPicker, {
        props: {
          modelValue: 'icon-dog'
        }
      });

      expect(wrapper.text()).toContain('üê∂');
    });

    it('„Ç¢„Ç§„Ç≥„É≥„É™„Çπ„Éà„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
      const wrapper = mount(IconPicker);

      const buttons = wrapper.findAll('button[type="button"]');
      expect(buttons.length).toBe(5); // „É¢„ÉÉ„ÇØ„ÅßÂÆöÁæ©„Åó„Åü5„Å§„ÅÆ„Ç¢„Ç§„Ç≥„É≥
    });

    it('ÂêÑ„Ç¢„Ç§„Ç≥„É≥„Éú„Çø„É≥„Å´ÁµµÊñáÂ≠ó„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
      const wrapper = mount(IconPicker);

      expect(wrapper.text()).toContain('üê±');
      expect(wrapper.text()).toContain('üê∂');
      expect(wrapper.text()).toContain('üêª');
      expect(wrapper.text()).toContain('ü¶ä');
      expect(wrapper.text()).toContain('üêº');
    });

    it('ÂêÑ„Ç¢„Ç§„Ç≥„É≥„Éú„Çø„É≥„Å´ title Â±ûÊÄß„ÅåË®≠ÂÆö„Åï„Çå„Çã', () => {
      const wrapper = mount(IconPicker);

      const buttons = wrapper.findAll('button[type="button"]');
      expect(buttons[0].attributes('title')).toBe('Áå´');
      expect(buttons[1].attributes('title')).toBe('Áä¨');
    });
  });

  describe('„Ç¢„Ç§„Ç≥„É≥ÈÅ∏Êäû', () => {
    it('„Ç¢„Ç§„Ç≥„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ„Åô„Çã„Å®ÈÅ∏ÊäûÁä∂ÊÖã„Å´„Å™„Çã', async () => {
      const wrapper = mount(IconPicker);

      const buttons = wrapper.findAll('button[type="button"]');
      const dogButton = buttons[1]; // icon-dog

      await dogButton.trigger('click');

      // ÈÅ∏Êäû„Åï„Çå„Åü„Ç¢„Ç§„Ç≥„É≥„ÅÆ„Çπ„Çø„Ç§„É´„ÅåÈÅ©Áî®„Åï„Çå„Çã
      expect(dogButton.classes()).toContain('bg-blue-100');
      expect(dogButton.classes()).toContain('border-blue-500');
    });

    it('„Ç¢„Ç§„Ç≥„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ„Åô„Çã„Å® update:modelValue „Ç§„Éô„É≥„Éà„ÅåÁô∫ÁÅ´„Åô„Çã', async () => {
      const wrapper = mount(IconPicker);

      const buttons = wrapper.findAll('button[type="button"]');
      const bearButton = buttons[2]; // icon-bear

      await bearButton.trigger('click');

      expect(wrapper.emitted('update:modelValue')).toBeTruthy();
      expect(wrapper.emitted('update:modelValue')[0]).toEqual(['icon-bear']);
    });

    it('„Ç¢„Ç§„Ç≥„É≥„ÇíÈÅ∏Êäû„Åô„Çã„Å®ÁèæÂú®„ÅÆ„Ç¢„Ç§„Ç≥„É≥„ÅåÊõ¥Êñ∞„Åï„Çå„Çã', async () => {
      const wrapper = mount(IconPicker, {
        props: {
          modelValue: 'icon-cat'
        }
      });

      expect(wrapper.text()).toContain('üê±');

      const buttons = wrapper.findAll('button[type="button"]');
      await buttons[3].trigger('click'); // icon-fox

      await nextTick();

      expect(wrapper.text()).toContain('ü¶ä');
    });
  });

  describe('ÈÅ∏ÊäûÁä∂ÊÖã„ÅÆË°®Á§∫', () => {
    it('„Éá„Éï„Ç©„É´„Éà„Ç¢„Ç§„Ç≥„É≥„ÅåÈÅ∏ÊäûÁä∂ÊÖã„Å®„Åó„Å¶Ë°®Á§∫„Åï„Çå„Çã', () => {
      const wrapper = mount(IconPicker, {
        props: {
          modelValue: 'icon-cat'
        }
      });

      const buttons = wrapper.findAll('button[type="button"]');
      const catButton = buttons[0];

      expect(catButton.classes()).toContain('bg-blue-100');
      expect(catButton.classes()).toContain('border-blue-500');
      expect(catButton.classes()).toContain('scale-105');
    });

    it('ÈÅ∏Êäû„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑ„Ç¢„Ç§„Ç≥„É≥„ÅØÈÄöÂ∏∏„ÅÆ„Çπ„Çø„Ç§„É´„ÅåÈÅ©Áî®„Åï„Çå„Çã', () => {
      const wrapper = mount(IconPicker, {
        props: {
          modelValue: 'icon-cat'
        }
      });

      const buttons = wrapper.findAll('button[type="button"]');
      const dogButton = buttons[1]; // ÈÅ∏Êäû„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑ

      expect(dogButton.classes()).toContain('bg-gray-100');
      expect(dogButton.classes()).toContain('border-transparent');
      expect(dogButton.classes()).not.toContain('border-blue-500');
    });
  });

  describe('v-model ÂèåÊñπÂêë„Éê„Ç§„É≥„Éá„Ç£„É≥„Ç∞', () => {
    it('Ë¶™„Åã„Çâ modelValue „ÅåÂ§âÊõ¥„Åï„Çå„Çã„Å®Ë°®Á§∫„ÅåÊõ¥Êñ∞„Åï„Çå„Çã', async () => {
      const wrapper = mount(IconPicker, {
        props: {
          modelValue: 'icon-cat'
        }
      });

      expect(wrapper.text()).toContain('üê±');

      // props „ÇíÊõ¥Êñ∞
      await wrapper.setProps({ modelValue: 'icon-panda' });

      expect(wrapper.text()).toContain('üêº');
    });

    it('Â≠ê„Åã„Çâ update:modelValue „Ç§„Éô„É≥„Éà„ÇíÁô∫ÁÅ´„Åô„Çã„Å®Ë¶™„Å´ÈÄöÁü•„Åï„Çå„Çã', async () => {
      const wrapper = mount(IconPicker, {
        props: {
          modelValue: 'icon-cat'
        }
      });

      const buttons = wrapper.findAll('button[type="button"]');
      await buttons[4].trigger('click'); // icon-panda

      expect(wrapper.emitted('update:modelValue')[0]).toEqual(['icon-panda']);
    });
  });

  describe('„Éò„É´„Éó„ÉÜ„Ç≠„Çπ„Éà', () => {
    it('„Ç¢„Ç§„Ç≥„É≥Êï∞„ÅÆË™¨Êòé„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
      const wrapper = mount(IconPicker);

      expect(wrapper.text()).toContain('„ÅäÂ•Ω„Åø„ÅÆ„Ç¢„Ç§„Ç≥„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ„Åó„Å¶ÈÅ∏Êäû„Åß„Åç„Åæ„Åô„ÄÇ');
    });

    it('„Ç¢„Ç§„Ç≥„É≥„ÅÆÁ∑èÊï∞„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
      const wrapper = mount(IconPicker);

      // ÂÆüÈöõ„ÅÆ„Ç¢„Ç§„Ç≥„É≥Êï∞„Å´Âøú„Åò„Åü„ÉÜ„Ç≠„Çπ„Éà„ÅåÂê´„Åæ„Çå„Å¶„ÅÑ„Çã„Åã
      const text = wrapper.text();
      expect(text).toMatch(/\d+Á®ÆÈ°û„ÅÆ„Ç¢„Ç§„Ç≥„É≥„Åã„ÇâÈÅ∏„Åπ„Åæ„Åô„ÄÇ/);
    });
  });

  describe('„Çπ„Çø„Ç§„É´', () => {
    it('„Ç¢„Ç§„Ç≥„É≥„Éî„ÉÉ„Ç´„Éº„ÅÆ„É´„Éº„ÉàË¶ÅÁ¥†„Å´ icon-picker „ÇØ„É©„Çπ„ÅåÈÅ©Áî®„Åï„Çå„Çã', () => {
      const wrapper = mount(IconPicker);

      const root = wrapper.find('.icon-picker');
      expect(root.exists()).toBe(true);
    });

    it('ÁèæÂú®„ÅÆ„Ç¢„Ç§„Ç≥„É≥Ë°®Á§∫È†òÂüü„ÅåÂ≠òÂú®„Åô„Çã', () => {
      const wrapper = mount(IconPicker);

      const currentIcon = wrapper.find('.w-16.h-16.rounded-full');
      expect(currentIcon.exists()).toBe(true);
    });

    it('„Ç¢„Ç§„Ç≥„É≥„Ç∞„É™„ÉÉ„Éâ„Åå grid-cols-5 „É¨„Ç§„Ç¢„Ç¶„Éà„Å´„Å™„Å£„Å¶„ÅÑ„Çã', () => {
      const wrapper = mount(IconPicker);

      const grid = wrapper.find('.grid.grid-cols-5');
      expect(grid.exists()).toBe(true);
    });
  });

  describe('‰∏çÊ≠£„Å™„Ç¢„Ç§„Ç≥„É≥ID', () => {
    it('Â≠òÂú®„Åó„Å™„ÅÑ„Ç¢„Ç§„Ç≥„É≥ID„ÅÆÂ†¥Âêà„Éá„Éï„Ç©„É´„Éà„Ç¢„Ç§„Ç≥„É≥„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
      const wrapper = mount(IconPicker, {
        props: {
          modelValue: 'invalid-icon-id'
        }
      });

      // getIconEmoji „Åå üë§ „ÇíËøî„Åô„Åì„Å®„Çí„ÉÜ„Çπ„Éà
      expect(wrapper.text()).toContain('üë§');
    });
  });

  describe('„Éõ„Éê„Éº„Ç®„Éï„Çß„ÇØ„Éà', () => {
    it('„Ç¢„Ç§„Ç≥„É≥„Éú„Çø„É≥„Å´ hover „ÇØ„É©„Çπ„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Çã', () => {
      const wrapper = mount(IconPicker);

      const buttons = wrapper.findAll('button[type="button"]');
      const firstButton = buttons[0];

      expect(firstButton.classes()).toContain('hover:scale-110');
      expect(firstButton.classes()).toContain('hover:shadow-md');
    });

    it('Êú™ÈÅ∏Êäû„ÅÆ„Ç¢„Ç§„Ç≥„É≥„Éú„Çø„É≥„Å´ hover:border-gray-300 „ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Çã', () => {
      const wrapper = mount(IconPicker, {
        props: {
          modelValue: 'icon-cat'
        }
      });

      const buttons = wrapper.findAll('button[type="button"]');
      const dogButton = buttons[1]; // ÈÅ∏Êäû„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑ

      expect(dogButton.classes()).toContain('hover:border-gray-300');
    });
  });
});
